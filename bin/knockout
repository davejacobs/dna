#!/usr/bin/env python

# Knockout - This script is meant to automate part of the cloning process
# in certain pathogenic bacteria. When executed with a bacterial strain 
# name (K-12, DH5a, etc.) and gene names, it designs primers for knocking 
# out each of those genes using the Lambda Red Recombinase system [0].
# Those primers are based on the pKD4 plasmid and have homology with the
# genes flanking your gene of interest. The script will also generate
# internal and external deletion confirmation primers to confirm your
# clone when you're completely done with the process.
#
# Note: This is a highly specific script right now, but I may extract
# core functionality from it into modules and publish it as a generalized
# Python package in the near future.
#
# [0] http://www.ncbi.nlm.nih.gov/pubmed/10829079

# Standard modules
import sys
import os.path
from copy import copy

# Transform classpath so that I can structure this library
# how I structure Ruby gems
curr_path = os.path.dirname(__file__)
lib_path = os.path.join(curr_path, '../lib')
sys.path.append(lib_path)

# Biopython modules
from Bio import Entrez
from Bio.Seq import Seq

# My library modules
from dna.fp import curry, zipmap, interpolate
from dna.cache import *
from dna.gene import *
from dna.sequence import *

# Constants, options and templates
project = {
    'name': 'Typhi Knockouts',
    'root': os.getcwd() + '/',
    'bacterial_strain': sys.argv[1],
    'gene_file': 'Genes.yml',
    'template_file': os.path.abspath(os.path.dirname(__file__ + '/../../..')) + '/templates/gene.txt'
}
print "template file is", os.path.abspath(project['template_file'])

experiment = {
    'genes': sys.argv[2:],
    'carrier_vector': 'pKD4',
    'forward_homology': 'GTGTAGGCTGGAGCTGCTTC',
    'reverse_homology': 'TAAGGAGGATATTCATATG',
    'recombinant_vector': 'pCP20',
    'scar': 'gtgtaggctggagctgcttcgaagttcctatactttc' + \
            'tagagaataggaacttcggaataggaac<deletion>taaggaggatattcatatg'
}

order_template = '%(sequence)s,%(name)s,%(memo)s'

def package_primers(primer):
    return {
        'name': primer[0],
        'sequence': primer[1],
        'memo': ''
    }

# Get a map of info for each value in the map `gene` whose key
# contains the word 'primer'. Translate that primer information (i.e., the
# gene it is a primer for, along with its sequence) into a new array
# of maps.
def primer_order(gene, template=order_template):
    primers = [order_template % p for p in map(package_primers, gene.primers.items())]
    return '\n'.join(primers)

# Use gene template file to create sequence/primer summary for gene
def gene_report(gene):
    template_file = project['root'] + project['template_file']
    if os.path.isfile(template_file):
        with open(template_file, 'r') as f:
            template = f.read()

        return template % gene.as_hash()

    else:
        exit('[error] no template file found\n')

# Main program
Entrez.email = 'email+here@mail.com'

load_cache()

genes = map(Gene, set(experiment['genes']))

print 'Order these primers:'
print

for gene in genes:
    print gene.name
    print
    print '  Homology'
    print
    print '    fwd:', gene.primers['homology-forward']
    print '    rev:', gene.primers['homology-reverse']
    print
    print '  Internal deletion confirmation'
    print
    print '    fwd:', gene.primers['internal-forward']
    print '    rev:', gene.primers['internal-reverse']
    print 
    print '  External deletion confirmation'
    print
    print '    fwd:', gene.primers['external-forward']
    print '    rev:', gene.primers['external-reverse']
    print
    print '------------------------------'
    print

    with open(project['root'] + gene.name + '.txt', 'w') as f:
        f.write(gene_report(gene))

if raw_input('Generate primer order? ')[0] == 'y':
    for gene in genes:
        print
        print primer_order(gene)
        print

save_cache()

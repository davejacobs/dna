#!/usr/bin/env python

# Knockout - This script is meant to automate part of the cloning process
# in certain pathogenic bacteria. When executed with a bacterial strain 
# name (K-12, DH5a, etc.) and gene names, it designs primers for knocking 
# out each of those genes using the Lambda Red Recombinase system [0].
# Those primers are based on the pKD4 plasmid and have homology with the
# genes flanking your gene of interest. The script will also generate
# internal and external deletion confirmation primers to confirm your
# clone when you're completely done with the process.
#
# Note: This is a highly specific script right now, but I may extract
# core functionality from it into modules and publish it as a generalized
# Python package in the near future.
#
# [0] http://www.ncbi.nlm.nih.gov/pubmed/10829079

# Standard modules
import sys
import os.path
from copy import copy

# Transform classpath so that I can structure this library
# how I structure Ruby gems
curr_path = os.path.dirname(__file__)
lib_path = os.path.join(curr_path, '../lib')
sys.path.append(lib_path)

# Biopython modules
from Bio import Entrez
from Bio.Seq import Seq

# My library modules
from dna.fp import curry, zipmap, interpolate
from dna.cache import *
from dna.gene import *
from dna.sequence import *

# Constants, options and templates
project = {
    'name': 'Typhi Knockouts',
    'root': os.getcwd() + '/',
    'bacterial_strain': sys.argv[1],
    'gene_file': 'Genes.yml',
    'template_file': 'templates/Gene.txt'
}

experiment = {
    'genes': sys.argv[2:],
    'carrier_vector': 'pKD4',
    'forward_homology': 'GTGTAGGCTGGAGCTGCTTC',
    'reverse_homology': 'TAAGGAGGATATTCATATG',
    'recombinant_vector': 'pCP20',
    'scar': 'gtgtaggctggagctgcttcgaagttcctatactttc' + \
            'tagagaataggaacttcggaataggaac<deletion>taaggaggatattcatatg'
}

order_template = '%(sequence)s,%(name)s,%(memo)s'

# Primer search and selection functions

# Constructs primers that will prime our plasmid (pKD4) and will have
# extensions that are homologous with the regions of DNA that flank
# gene.
def homology_primers(gene, relative_location='upstream', length=50, space=''):
    gi, strand, start, end = gene.coordinates
    
    upstream = str(Sequence(gi, strand, start-length, start-1))
    downstream = str(Sequence(gi, strand, end+1, end+length))

    # If we're on the negative strand, then our start and end
    # calculations were switched -- so switch the homologous
    # regions before adding any other sequences to them.
    if strand == 'minus':
        upstream_homology, downstream_homology = \
                downstream_homology, upstream_homology

    upstream_homology += space + experiment['forward_homology']
    downstream_homology = str(Seq(experiment['reverse_homology'] + space + \
            downstream_homology).reverse_complement())

    if relative_location == 'upstream':
        return upstream_homology
    elif relative_location == 'downstream':
        return downstream_homology
    else:
        return None

# Returns a copy of gene, with the homology primers added
def with_homology_primers(gene):
    gene_copy = copy(gene)

    upstream = homology_primers(gene, 'upstream')
    downstream = homology_primers(gene, 'downstream')

    gene_copy.primers['homology-forward'] = upstream
    gene_copy.primers['homology-reverse'] = downstream
    
    return gene_copy

# Returns a copy of gene, with internal primers added
def with_internal_primers(gene):
    gene_copy = copy(gene)

    gi, strand, start, end = gene.coordinates
    sequence = Sequence(gi, strand, start, end)

    gene_copy.primers['internal-forward'] = sequence.forward_primer()
    gene_copy.primers['internal-reverse'] = sequence.reverse_primer()

    return gene_copy

# Returns a copy of gene, with external primers added. Distance
# out from gene defaults to 500 bp
def with_external_primers(gene, distance='500'):
    gene_copy = copy(gene)

    gi, strand, start, end = gene.coordinates
    upstream = Sequence(gi, strand, start-distance, start-1)
    downstream = Sequence(gi, strand, end+1, end+distance)

    gene_copy.primers['external-forward'] = upstream.forward_primer()
    gene_copy.primers['external-reverse'] = downstream.reverse_primer()

    return gene_copy

def with_all_primers(gene):
    return map(with_internal_primers,
               map(with_external_primers,
                   map(with_homology_primers, gene)))

def package_primers(primer):
    return {
        'name': primer[0],
        'sequence': primer[1],
        'memo': ''
    }

# Get a map of info for each value in the map `gene` whose key
# contains the word 'primer'. Translate that primer information (i.e., the
# gene it is a primer for, along with its sequence) into a new array
# of maps.
def as_csv(gene, template=order_template):
    primers = [order_template % p for p in map(package_primers, gene.primers)]
    return '\n'.join(primers)

# Side-effect function

# Use gene template file to create sequence/primer summary for gene
def create_gene_report(gene):
    template_file = project['root'] + project['template_file']
    if os.path.isfile(template_file):
        with open(template_file, 'r') as f:
            template = f.read()

        return template % gene.as_hash()

    else:
        exit('[error] no template file found')

# Main program
Entrez.email = 'email+here@mail.com'

load_cache()

genes = map(Gene, set(experiment['genes']))
genes_with_primers = map(with_all_primers, genes)

print 'Order these primers:'
print

for gene in genes:
    print gene.name
    print
    print '  Homology'
    print
    print '    fwd:', gene.primers['homology-forward']
    print '    rev:', gene.primers['homology-reverse']
    print
    print '  Internal deletion confirmation'
    print
    print '    fwd:', gene.primers['internal-forward']
    print '    rev:', gene.primers['internal-reverse']
    print 
    print '  External deletion confirmation'
    print
    print '    fwd:', gene.primers['external-forward']
    print '    rev:', gene.primers['external-reverse']
    print
    print '------------------------------'
    print

    report = create_gene_report(gene)
    with open(project['root'] + gene.name + '.txt', 'w') as f:
        f.write(report)

if raw_input('Generate primer order? ') == 'y':
    for gene in genes:
        print
        print as_csv(gene)
        print

save_cache()
